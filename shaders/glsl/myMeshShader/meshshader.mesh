/* Copyright (c) 2021, Sascha Willems
 *
 * SPDX-License-Identifier: MIT
 *
 */

#version 460
#extension GL_EXT_mesh_shader : require

#include "../../../MyDevs/myBase/myIncludesCPUGPU.h"

layout (set = 0, binding = 0) uniform UBOScene 
{
	mat4 projection;
	mat4 view;
	vec4 lightPos;
	vec4 viewPos;
} uboScene;

layout (set = 1, binding = 0) uniform UBOModel
{
	mat4 matrix;
#ifdef USE_SKINNING
	mat4 jointMatrix[64];
	float jointcount;
#endif
} uboModel;

struct VertexType
{
	vec3 pos;
	float normalX;
	vec2 normalYZ;
	vec2 uv;
	vec4 color;
	vec4 tangent;
#ifdef USE_SKINNING
	vec4 joint0;
	vec4 weight0;
#endif
};
struct Meshlet
{
	/* offsets within meshlet_vertices and meshlet_triangles arrays with meshlet data */
	uint vertexOffset;
	uint triangleOffset;

	/* number of vertices and triangles used in the meshlet; data is stored in consecutive range defined by offset and count */
	uint vertexCount;
	uint triangleCount;
};
taskPayloadSharedEXT Payload_MeshShader payload;

layout (std430, set = 3, binding = 0) buffer SSBOVertexBuffer
{
	VertexType vertices[];
}ssboVertices;
layout (set = 3, binding = 1) buffer SSBOMeshlets
{
	Meshlet meshlet[];
}ssboMeshlets;
layout (set = 3, binding = 2) buffer SSBOMeshletsVertexBuffer
{
	uint vertices[];
}ssboMeshletsVertices;
layout (set = 3, binding = 3) buffer SSBOMeshletsIndexBuffer
{
	uint indices[];
}ssboMeshletTriangles;


layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(location = 0) out MeshOutput
{
	vec4 color;
} meshOutput[];
layout(triangles, max_vertices = 64, max_primitives = 128) out;
void main()
{
	uint liID = gl_LocalInvocationID.x; // threadIdx
	uint wgID = gl_WorkGroupID.x; // blockIdx
	uint meshletIndex = payload.meshletIndices[wgID];

	Meshlet m = ssboMeshlets.meshlet[meshletIndex];
	SetMeshOutputsEXT(m.vertexCount, m.triangleCount);

	if (liID < m.triangleCount)
	{ 
        // meshopt stores the triangle offset in bytes since it stores the
        // triangle indices as 3 consecutive bytes. 
        //
        // Since we repacked those 3 bytes to a 32-bit uint, our offset is now
        // aligned to 4 and we can easily grab it as a uint without any 
        // additional offset math.
        //
        uint packed = ssboMeshletTriangles.indices[m.triangleOffset + liID];
        uint vIdx0  = (packed >>  0) & 0xFF;
        uint vIdx1  = (packed >>  8) & 0xFF;
        uint vIdx2  = (packed >> 16) & 0xFF;
        gl_PrimitiveTriangleIndicesEXT[liID] = uvec3(vIdx0, vIdx1, vIdx2);
	}

	if (liID < m.vertexCount)
	{
		uint vertexIndex = m.vertexOffset + liID;        
        vertexIndex = ssboMeshletsVertices.vertices[vertexIndex];

		mat4 mvp = uboScene.projection * uboScene.view * uboModel.matrix;
		gl_MeshVerticesEXT[liID].gl_Position = mvp * vec4(ssboVertices.vertices[vertexIndex].pos, 1);

        vec3 color = vec3(
            float(meshletIndex & 1),
            float(meshletIndex & 3) / 4,
            float(meshletIndex & 7) / 8);
		meshOutput[liID].color = vec4(color, 1);
	}
}
